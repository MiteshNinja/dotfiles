# @oxalorg
# Common shell rc

autoload -U edit-command-line   # Allows C-x-e to edit command in editor
CABINET=~/Dropbox/cabinet
NOTES=$CABINET/notes
DOTFILES=~/Dropbox/Projects/dotfiles

# Imports
[ -f ~/.aliases ] && source ~/.aliases  # Import common aliases
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh  # Import FZF plugin
[ -f ~/.ox/ox ] && source ~/.ox/ox
[ -f ~/.dircolors ] && eval `dircolors ~/.dircolors`

export PATH="$HOME/.local/bin:$PATH"
export PATH=$HOME/go/bin:$PATH
export PATH="$HOME/Library/Python/3.6/bin:$PATH"
export PATH="$HOME/Library/Python/3.7/bin:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH=$HOME/.yarn/bin:/usr/local/bin:$PATH

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
[ -f "$HOME/.local/bin/ox" ] && source $HOME/.local/bin/ox

# Functions

## Make and Change Directory
### Source: http://unix.stackexchange.com/questions/9123/is-there-a-one-liner-that-allows-me-to-create-a-directory-and-move-into-it-at-th
#mcd () {
#  case "$1" in
#    */..|*/../) cd -- "$1";; # that doesn't make any sense unless the directory already exists
#    /*/../*) (cd "${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd -- "$1";;
#    /*) mkdir -p "$1" && cd "$1";;
#    */../*) (cd "./${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd "./$1";;
#    ../*) (cd .. && mkdir -p "${1#.}") && cd "$1";;
#    *) mkdir -p "./$1" && cd "./$1";;
#  esac
#}

# press ctrl-z again to unsuspend
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
            zle accept-line
    else
        zle push-input
            zle clear-screen
            fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z


export WORKON_HOME=$HOME/.virtualenvs
if [ "$(uname -s)" = "Darwin" ]; then
    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
    export VIRTUALENVWRAPPER_SCRIPT=$HOME/Library/Python/3.6/bin/virtualenvwrapper.sh
    source $HOME/Library/Python/3.6/bin/virtualenvwrapper_lazy.sh
    export ANDROID_HOME=$HOME/Library/Android/sdk
else
    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
    export VIRTUALENVWRAPPER_SCRIPT=~/.local/bin/virtualenvwrapper.sh
    source ~/.local/bin/virtualenvwrapper_lazy.sh
    #export DOCKER_HOST=tcp://localhost:2375
fi

if [[ "$(uname)" == "Darwin" ]]; then
    export ZSH="/Users/ox/.oh-my-zsh"
    export PATH=/Users/ox/Library/Python/3.7/bin/:$PATH
    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
    export VIRTUALENVWRAPPER_SCRIPT=/Users/ox/Library/Python/3.7/bin/virtualenvwrapper.sh
    alias xdg-open="open"
else
    export ZSH="/home/ox/.oh-my-zsh"
    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
    export VIRTUALENVWRAPPER_SCRIPT=~/.local/bin/virtualenvwrapper.sh
    alias open="xdg-open"
fi

export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

export FZF_BASE=$HOME/.fzf
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_DEFAULT_OPTS="--layout=reverse --inline-info"
export FZF_CTRL_T_COMMAND='fd --type f'

export REVIEW_BASE='master'

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

workon_cache=()
function w() {
    if [ ${#workon_cache[@]} -eq 0 ]; then
        # populate cache
        workon_cache=(`workon`)
    fi
    curr_pwd=`pwd`
    curr_dir=`basename $curr_pwd`
	if [[ " ${workon_cache[@]} " =~ " ${curr_dir} " ]]; then
        # workon_cache contains env matching curr_dir
        workon $curr_dir
    else
        echo "Sorry. No virtualenv found."
        echo "Do you want to create a virtualenv named: '$curr_dir'? [y/N]"
        read choice
        if [[ $choice == [yY]* ]]; then
            mkvirtualenv $curr_dir
            workon_cach+=($curr_dir)
        fi
	fi
}

function og() {
    project_slug=$(git remote -v | tr ':' ' ' | awk '{print $3}' | sed 's/\(.*\).git/\1/' | head -n 1)
    if [[ $# -gt 0 && "$1" == "i"* ]]; then
        echo "Opening $project_slug/issues/"
        xdg-open https://github.com/$project_slug/issues/
    else
        echo "Opening $project_slug"
        xdg-open https://github.com/$project_slug/
    fi
}


function ogi() {
    project_slug=$(git remote -v | tr ':' ' ' | awk '{print $3}' | sed 's/\(.*\).git/\1/' | head -n 1)
    echo "Opening $project_slug"
    xdg-open https://github.com/$project_slug
}

function optimizejpg() {
    ogdir="optimizejpg-original"
    mkdir -p $ogdir
    for file in "$@"; do
        cp "$file" $ogdir
        convert "$file" -resize 1920x1080\> -sampling-factor 4:2:0 -strip -quality 85 -interlace JPEG -colorspace RGB "$file"
    done
}
function optimizepng() {
    ogdir="optimizepng-original"
    mkdir -p $ogdir
    for file in "$@"; do
        cp "$file" $ogdir
        pngquant "$file" --ext "opti.png"
        rm "$file"
    done
}

function dropbox-ignore() {
    if [[ "$(uname)" == "Darwin" ]]; then
        xattr -w com.dropbox.ignored 1 "$1"
    else
        attr -s com.dropbox.ignored -V 1 "$1"
    fi
}

f() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}

# Like f, but not recursive.
fm() f "$@" --max-depth 1

fif() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}
